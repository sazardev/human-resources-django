# Generated by Django 5.2.1 on 2025-05-31 20:02

import datetime
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('position', models.CharField(max_length=100)),
                ('hire_date', models.DateField()),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('terminated', 'Terminated'), ('on_leave', 'On Leave')], default='active', max_length=20)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('country', models.CharField(default='Mexico', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employees.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['employee_id'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('performance', 'Performance'), ('skill_development', 'Skill Development'), ('leadership', 'Leadership'), ('project', 'Project'), ('behavior', 'Behavior'), ('career', 'Career Development')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('start_date', models.DateField(default=datetime.date.today)),
                ('target_date', models.DateField()),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('overdue', 'Overdue')], default='pending', max_length=15)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('success_criteria', models.TextField(help_text='Define what success looks like')),
                ('measurable_outcomes', models.TextField(blank=True, help_text='Specific, measurable outcomes or KPIs', null=True)),
                ('progress_notes', models.TextField(blank=True, help_text='Progress notes and updates', null=True)),
                ('completion_notes', models.TextField(blank=True, help_text='Notes upon completion', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Who created this goal', on_delete=django.db.models.deletion.CASCADE, related_name='created_goals', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_goals', to='employees.employee')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_type', models.CharField(choices=[('annual', 'Annual Review'), ('semi_annual', 'Semi-Annual Review'), ('quarterly', 'Quarterly Review'), ('probationary', 'Probationary Review'), ('project_based', 'Project-Based Review')], max_length=20)),
                ('review_period_start', models.DateField()),
                ('review_period_end', models.DateField()),
                ('review_date', models.DateField(default=datetime.date.today)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('in_review', 'In Review'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('overall_rating', models.IntegerField(choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('technical_skills', models.IntegerField(choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], help_text='Technical competency and job-specific skills', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication', models.IntegerField(choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], help_text='Verbal, written, and interpersonal communication', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('teamwork', models.IntegerField(choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], help_text='Collaboration and team contribution', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('leadership', models.IntegerField(blank=True, choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], help_text='Leadership qualities and initiative', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('problem_solving', models.IntegerField(choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], help_text='Analytical thinking and problem resolution', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('adaptability', models.IntegerField(choices=[(1, 'Needs Improvement'), (2, 'Below Expectations'), (3, 'Meets Expectations'), (4, 'Exceeds Expectations'), (5, 'Outstanding')], help_text='Flexibility and adaptation to change', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('strengths', models.TextField(help_text="Employee's key strengths and accomplishments")),
                ('areas_for_improvement', models.TextField(help_text='Areas where employee can improve')),
                ('goals_for_next_period', models.TextField(help_text='Goals and objectives for next review period')),
                ('reviewer_comments', models.TextField(blank=True, help_text='Additional reviewer comments', null=True)),
                ('employee_comments', models.TextField(blank=True, help_text="Employee's response and comments", null=True)),
                ('promotion_recommendation', models.BooleanField(default=False)),
                ('salary_increase_recommendation', models.BooleanField(default=False)),
                ('training_recommendations', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_reviews', to='employees.employee')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-review_date'],
                'unique_together': {('employee', 'review_period_start', 'review_period_end')},
            },
        ),
        migrations.CreateModel(
            name='PerformanceNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_type', models.CharField(choices=[('observation', 'Observation'), ('achievement', 'Achievement'), ('concern', 'Concern'), ('feedback', 'Feedback'), ('recognition', 'Recognition'), ('coaching', 'Coaching')], max_length=15)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('date_observed', models.DateField(default=datetime.date.today)),
                ('is_private', models.BooleanField(default=False, help_text='Private notes are only visible to HR and managers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_notes', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_notes', to='employees.employee')),
                ('goal', models.ForeignKey(blank=True, help_text='Associated performance goal', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes', to='employees.performancegoal')),
                ('review', models.ForeignKey(blank=True, help_text='Associated performance review', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes', to='employees.performancereview')),
            ],
            options={
                'ordering': ['-date_observed'],
            },
        ),
        migrations.AddField(
            model_name='performancegoal',
            name='review',
            field=models.ForeignKey(blank=True, help_text='Associated performance review', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='goals', to='employees.performancereview'),
        ),
    ]
